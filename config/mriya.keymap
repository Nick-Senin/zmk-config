/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp ESCAPE         &kp N1  &kp N2            &kp N3        &kp N4  &kp N5       &kp N6     &kp N7  &kp N8          &kp N9   &kp N0    &kp MINUS
  &kp TAB            &kp Q   &kp W             &kp E         &kp R   &kp T        &kp Y      &kp U   &kp I           &kp O    &kp P     &kp LBKT
  &kp LC(BACKSPACE)  &kp A   &kp S             &kp D         &kp F   &kp G        &kp H      &kp J   &kp K           &kp L    &kp SEMI  &kp SINGLE_QUOTE
  &kp LEFT_SHIFT     &kp Z   &kp X             &kp C         &kp V   &kp B        &kp N      &kp M   &kp COMMA       &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                             &kp LEFT_CONTROL  &kp LEFT_ALT  &mo 1   &kp SPACE    &kp ENTER  &mo 2   &kp LANGUAGE_1  &mo 3
            >;
        };

        lower_layer {
            bindings = <
  &kp LG(ESCAPE)  &none      &none            &none      &none            &none                  &trans             &trans            &trans              &trans             &trans  &trans
  &kp LG(TAB)     &kp LC(W)  &kp LC(LS(TAB))  &kp UP     &kp LC(LA(TAB))  &kp LC(F5)             &trans             &kp LA(LC(LEFT))  &trans              &kp LC(LA(RIGHT))  &trans  &trans
  &kp BACKSPACE   &kp EXCL   &kp LEFT         &kp DOWN   &kp RIGHT        &kp LC(PRINTSCREEN)    &kp LC(LEFT)       &kp LC(UP_ARROW)  &kp LC(DOWN_ARROW)  &kp LC(RIGHT)      &trans  &kp LS(LC(DELETE))
  &trans          &kp LC(A)  &kp LC(X)        &kp LC(C)  &kp LC(V)        &kp DELETE             &kp LC(LS(H))      &kp LC(LS(M))     &kp LS(LC(F))       &trans             &trans  &trans
                             &mo 3            &lt 3 TAB  &trans           &key_repeat            &kp LA(LC(ENTER))  &kp LC(O)         &none               &trans
            >;
        };

        raise_layer {
            bindings = <
  &kp TAB  &kp F1  &kp F2     &kp F3            &kp F4     &kp F5          &trans                &trans                 &trans    &trans     &trans           &trans
  &none    &none   &none      &kp LA(UP_ARROW)  &none      &kp KP_MINUS    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE  &kp ESC    &kp SLCK         &kp CAPS
  &none    &none   &none      &none             &none      &none           &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp UP    &kp RIGHT  &kp INS          &mt RCTRL K_APP
  &trans   &none   &kp MINUS  &kp PLUS          &kp EQUAL  &none           &kp LBKT              &kp RBKT               &kp DOWN  &kp PG_DN  &kp PAUSE_BREAK  &trans
                   &trans     &trans            &trans     &lt 3 RET       &lt 3 ESC             &trans                 &trans    &trans
            >;
        };

        adjust_layer {
            bindings = <
  &bt BT_CLR    &none  &none         &none         &none          &none            &none   &kp K_PREV         &kp C_PLAY_PAUSE  &kp K_NEXT       &none  &none
  &bt BT_SEL 0  &none  &none         &kp LG(UP)    &none          &none            &none   &kp LS(LG(U))      &kp LS(LG(I))     &kp LS(LG(O))    &none  &none
  &bt BT_SEL 1  &none  &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(RIGHT)  &none            &none   &kp LS(LG(J))      &kp LS(LG(K))     &kp LS(LG(L))    &none  &none
  &bt BT_SEL 2  &none  &none         &kp LG(D)     &none          &none            &none   &kp C_VOLUME_DOWN  &none             &kp C_VOLUME_UP  &none  &none
                       &none         &trans        &none          &kp LG(ENTER)    &trans  &none              &kp LANGUAGE_2    &none
            >;
        };
    };
};
